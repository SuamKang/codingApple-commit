// Q. 정규표현식

// string내장 메서드인 includes()
// str.includes() --> boolean값 리턴(해당문자 있으면 true 없으면 false)
// 'abc'.includes() --> true

// 하지만 위 .includes()메서드는 단순한 문자포함 여부만 나타낸다.
// 한글이 있다거나,영어가있다거나, 무슨 문자로끝나나, 몇회출현하나 등등은 해결할 수 없음.
// 이럴때 정규표현식을 사용한다.
// 정규식을쓰면 문자 검사할 수 있다.

// 활용예시
// // --> 슬래시 안에 검사할 문자를 넣어준다.
// /str/.test('forStrTest') --> 검사할 문자를 test인자로 넣어준다. (인자 안에 넣어준 문자안에 str이 포함 되어있는지 없는지 불린값으로 판별)
// 또, 범위를 설정해서 그안에 문자도 검사 가능
// /[a-z]/.test('abcf') ---> a부터 z중에 아무글자 1개가 들어있나 없나
// /[a-zA-Z]/.test() ---> 아무 알파벳중 하나 들어있는지
// /[ㄱ-ㅎ가-힣]/.test() ---> 아무 한글중 하나 들어있는지

// 매칭패턴
// a-zA-Z : 영어 알파벳(-로 범위 지정)
// ㄱ-ㅎ가-힣 : 한글
// 0-9 : 숫자
// . : 모든 문자열(숫자,한글,영어,특수기호,공백) 단 줄바꿈은 X
// \d : 숫자
// \D : 숫자가 아닌것
// \w : 영어,숫자,언더스코어
// \s : 공백
// \S : 아무 문자, 공백이 아닌것
// \특수기호 : 특수기호


// 검색패턴
// [] : []안의 문자 들중 하나
// | : or
// [^문자] : 문자를 제외한것
// ^문자열 : 특정 문자열로 시작(얜 괄호 없음)
// 문자열$ : 특정 문자열로 끝
// () : 그룹검색 및 분류(match메서드에서 그룹별로 묶어줌)


// 수량패턴
// ? : 최대 한번
// * : 있거나 없거나
// + : 최소 한개 || + 옆 문자 반복검색
// {n} : n개
// {Min,} : 최소 Min개 이상
// {Min,Max} : 최소 Min개 이상, 최대 Max개 이하


// 정규표현식 플래그 (여러개 동시에도 사용가능 gi,gm등)
// g : 모든 문자 검색(안쓰면 매칭되는 첫 문자만 검색)
// i : Ignore case 대소문자 구분 안함
// m : Multi line 여러 행의 문자열에 대해 검색
 

// 정규표현식 주요 메서드
// ("문자열").match(/Regex/플래그) - 문자열에서 정규표현식에 매칭되는 항목들을 배열로 반환
// ("문자열").replace(/Regex/,"대체문자열") - 정규표현식에 매칭되는 항목을 대체문자열로 반환
// ("문자열").split(Regex) - 문자열을 정규표현식에 매칭되는 항목으로 쪼개어 배열로 반환
// (/Regex/).test("문자열") - 문자열이 정규표현식과 매칭되면 true, 아니면 false 반환